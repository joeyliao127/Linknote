package com.penguin.linknote.service.impl;

import com.penguin.linknote.common.command.PageCommand;
import com.penguin.linknote.common.dto.PageResponse;
import com.penguin.linknote.common.service.PaginationService;
import com.penguin.linknote.domain.!{lower}.!{upper}Command;
import com.penguin.linknote.domain.!{lower}.!{upper}DTO;
import com.penguin.linknote.entity.!{upper};
import com.penguin.linknote.entity.Q!{upper};
import com.penguin.linknote.repository.!{upper}Repository;
import com.penguin.linknote.repository.UserRepository;
import com.penguin.linknote.service.!{upper}Service;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQuery;
import com.querydsl.jpa.impl.JPAQueryFactory;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.UUID;

@Service
public class !{upper}ServiceImpl implements !{upper}Service {

    private final !{upper}Repository !{lower}Repository;
    private final JPAQueryFactory jpaQueryFactory;
    private final PaginationService paginationService;

    public !{upper}ServiceImpl(
            !{upper}Repository !{lower}Repository,
            JPAQueryFactory jpaQueryFactory,
            PaginationService paginationService)
    {
        this.!{lower}Repository = !{lower}Repository;
        this.jpaQueryFactory = jpaQueryFactory;
        this.paginationService = paginationService;
    }

    @Override
    public PageResponse<!{upper}DTO> index!{upper}s(String title, Boolean active, PageCommand pageCommand) {
        Q!{upper} q!{upper} = Q!{upper}.!{lower};

        BooleanBuilder booleanBuilder = new BooleanBuilder();

        if(title != null) booleanBuilder.and(q!{upper}.title.eq(title));
        if(active != null) booleanBuilder.and(q!{upper}.isActive.eq(active));

        JPAQuery<!{upper}> !{lower}JPAQuery = jpaQueryFactory
                .selectFrom(q!{upper})
                .where(booleanBuilder)
                .orderBy(q!{upper}.title.asc());

        return paginationService.applyPagination(!{lower}JPAQuery, pageCommand, !{upper}DTO::fromEntity);
    }


    @Override
    public !{upper}DTO get!{upper}ById(UUID !{lower}Id) {
        return null;
    }

    @Override
    public !{upper}DTO create!{upper}(!{upper}Command !{lower}Command) {
        !{upper} !{lower} = new !{upper}();
        !{lower}.setId(UUID.randomUUID());
        !{lower}.setCreatedAt(Instant.now());
        !{lower}.setUpdatedAt(Instant.now());

        return !{upper}DTO.fromEntity(!{lower}Repository.save(!{lower}));
    }

    @Override
    public !{upper}DTO update!{upper}(UUID !{lower}Id, !{upper}Command !{lower}Command) {
        !{upper} existing!{upper} = !{lower}Repository.findById(!{lower}Id).orElseThrow(() -> new EntityNotFoundException("!{upper} not found"));
        existing!{upper}.setId(!{lower}Id);
        existing!{upper}.setUpdatedAt(Instant.now());

        return !{upper}DTO.fromEntity(!{lower}Repository.save(existing!{upper}));
    }

    @Override
    public void delete!{upper}(UUID !{lower}Id) {
        !{lower}Repository.deleteById(!{lower}Id);
    }
}
